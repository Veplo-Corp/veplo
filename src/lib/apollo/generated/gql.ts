/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    mutation editOrder(\n        $id: ID!\n        $options: EditOrderInput!\n    ) {\n        editOrder(\n            id: $id\n            options: $options\n        )\n    }\n": types.EditOrderDocument,
    "\n    mutation checkout(\n        $shopId: ID!\n    ) {\n        checkout(\n            shopId: $shopId\n        )\n    }\n": types.CheckoutDocument,
    "\n    mutation createBusinessStep1{\n        createBusinessStep1\n    }\n": types.CreateBusinessStep1Document,
    "\n    mutation createInformation(\n        $options: InformationInput!\n    ) {\n        createInformation(\n            options: $options\n        )\n    }\n": types.CreateInformationDocument,
    "\n    mutation createProduct(\n        $shopId: ID!\n        $options: ProductInput!\n    ) {\n        createProduct(\n            shopId: $shopId\n            options: $options\n        )\n    }\n": types.CreateProductDocument,
    "\n    mutation createShop(\n        $options: ShopInput!\n    ) {\n        createShop(\n            options: $options\n        )\n    }\n": types.CreateShopDocument,
    "\n    mutation createStripeAccount(\n        $businessName: String!\n        $vatNumber: String!\n        $phone: String!\n    ) {\n        createStripeAccount(\n            businessName: $businessName\n            vatNumber: $vatNumber\n            phone: $phone\n        )\n    }\n": types.CreateStripeAccountDocument,
    "\n    mutation createUser(\n        $options: UserInput!\n    ) {\n        createUser(\n            options: $options\n        )\n    }\n": types.CreateUserDocument,
    "\nmutation createVariation(\n        $productId: ID!, $options: ProductVariationInput!\n    ) \n    {\n        createVariation(productId: $productId, options: $options)\n    }\n": types.CreateVariationDocument,
    "\n  mutation deleteProduct(\n    $id: ID!\n  ){\n    deleteProduct(id: $id) \n  }\n\n": types.DeleteProductDocument,
    "\n  mutation deleteVariation(\n    $id: ID!\n  ){\n    deleteVariation(id: $id) \n  }\n\n": types.DeleteVariationDocument,
    "\n    mutation Mutation($orderId: ID!) {\n        denyReturn(orderId: $orderId)\n    }\n": types.MutationDocument,
    "\n    mutation editCart(\n        $productVariationId: ID!\n        $size: String!\n        $quantity: Int!\n    ) {\n        editCart(\n            productVariationId: $productVariationId\n            size: $size\n            quantity: $quantity\n        )\n    }\n": types.EditCartDocument,
    "\n    mutation editProduct(\n        $id: ID!\n        $options: EditProductInput!\n    ) {\n        editProduct(\n            id: $id\n            options: $options\n        )\n    }\n": types.EditProductDocument,
    "\n  mutation changeProductStatus(\n    $id: ID!\n    $status:String!\n  ){\n    changeProductStatus(\n        id: $id\n        status: $status\n    ) \n  }\n": types.ChangeProductStatusDocument,
    "\n    mutation editUser(\n        $options: EditUserInput!\n    ) {\n        editUser(\n            options:$options\n        )\n    }\n": types.EditUserDocument,
    "\n    mutation editVariation(\n        $id:ID!\n        $options: EditVariationInput!\n    ) {\n        editVariation(\n            id:$id\n            options:$options\n        )\n    }\n": types.EditVariationDocument,
    "\n    mutation cancelOrder(\n        $orderId: ID!\n    ) {\n        cancelOrder(\n            orderId: $orderId\n        )\n    }\n": types.CancelOrderDocument,
    "\n    mutation returnOrder($returnOrderId: ID!) {\n    returnOrder(id: $returnOrderId)\n  }\n\n": types.ReturnOrderDocument,
    "\n    mutation returnedOrderHasArrived($id: ID!) {\n        returnedOrderHasArrived(id: $id)\n    }\n": types.ReturnedOrderHasArrivedDocument,
    "\nquery betterInputGenerator($query: String!) {\n    betterInputGenerator(query: $query) {\n      colors\n      sizes\n      brand\n      minPrice\n      maxPrice\n      query\n      macroCategory\n      microCategory\n      keywords\n      univers\n    }\n  }\n": types.BetterInputGeneratorDocument,
    "\n    query business($id: ID!) {\n        business(\n            id: $id\n        ){\n            firebaseId\n            vatNumber\n            email\n            businessName\n            phone\n            status\n            createdAt\n            stripe {\n                id\n            }\n            shops {\n                id\n                businessId\n                categories\n                name\n                createdAt\n                status\n                profilePhoto\n                minimumAmountForFreeShipping\n                profileCover\n                isDigitalOnly\n                info{\n                    phone\n                    description\n                    opening {\n                        days\n                        hours\n                    }\n                \n                }\n                address {\n                    postcode\n                    city\n                    street\n                    location {\n                        type\n                        coordinates\n                    }\n                }\n            }\n        } \n    }\n    \n": types.BusinessDocument,
    "\n    query GetProductsFromSingleShop(\n        $id: ID!\n        $limit: Int!\n        $offset: Int!\n        $filters: ProductFilters!\n        ) {\n        shop(\n            id: $id\n        )  {\n                id\n                products(\n                    limit: $limit\n                    offset: $offset\n                    filters: $filters\n                ){\n                    products{\n                        id\n                        name\n                        status\n                        canBuy\n                        info {\n                            gender\n                            macroCategory\n                            microCategory\n                            brand\n                            fit\n                        }\n                        variations{\n                        id\n                        color\n                        status\n                        photos\n                        lots {\n                            size\n                            quantity\n                            }\n                        }\n                        price {\n                            v1\n                            discountPercentage\n                            v2\n                        }\n                        shopInfo{\n                            id\n                            businessId\n                            name \n                            city\n                            status\n                            profilePhoto\n                        }\n                    }\n                } \n            \n            \n            } \n        }\n": types.GetProductsFromSingleShopDocument,
    "\n    query order(\n        $id: ID!\n        ) {\n        order(\n            id: $id\n        ){\n            id\n            code\n            cartId\n            createdAt\n            totalDetails{\n                amountDiscount\n                amountShipping\n                subTotal\n                total\n            }\n            status\n            shop{\n                businessId\n                stripeId\n                id\n                name\n            }\n            shipping{\n                url\n                courier\n                code\n            }\n            productVariations{\n                productId\n                id\n                photo\n                name\n                price{\n                    v1\n                    v2\n                    discountPercentage\n                }\n                brand\n                quantity\n                color\n                size\n            }\n            user{\n                stripeId\n                id\n                email\n                name\n                surname\n            }\n            recipient{\n                name\n                phone\n                address{\n                    city\n                    country\n                    line1\n                    line2\n                    postalCode\n                    state\n                }\n            }  \n            history {\n                date\n                status\n              }\n        }   \n    }\n": types.OrderDocument,
    "\n    query products(\n        $limit: Int!\n        $offset: Int!\n        $filters: ProductFilters!   \n        ) {\n        products(\n            limit: $limit\n            offset: $offset\n            filters: $filters    \n        ){\n            products{\n                id\n                name\n                status\n                canBuy\n                info {\n                    gender\n                    macroCategory\n                    microCategory\n                    brand\n                    fit\n                }\n                variations{\n                id\n                color\n                status\n                photos\n                lots {\n                    size\n                    quantity\n                    }\n                }\n                price {\n                    v1\n                    discountPercentage\n                    v2\n                }\n                shopInfo{\n                    id\n                    businessId\n                    name \n                    city\n                    status\n                    profilePhoto\n                }\n            }\n        } \n    }\n    \n": types.ProductsDocument,
    "\n    query getSingleShop(\n        $id: ID!\n        ) {\n        shop(\n            id: $id\n        ){\n            id\n            businessId\n            name\n            categories\n            createdAt\n            status\n            profilePhoto\n            profileCover\n            isDigitalOnly\n            minimumAmountForFreeShipping\n            info{\n                phone\n                description\n                opening{\n                    days\n                    hours\n                }\n            }\n            address{\n                postcode\n                city\n                street\n                location {\n                    type\n                    coordinates\n                }\n            }\n            \n        } \n    }\n": types.GetSingleShopDocument,
    "\n    query shops($limit: Int!, $offset: Int!, $filters: ShopFilters!) {\n    shops(limit: $limit, offset: $offset, filters: $filters) {\n      categories\n      id\n      businessId\n      businessStatus\n      name\n      createdAt\n      status\n      profileCover\n      profilePhoto\n      isDigitalOnly\n      info {\n        phone\n        description\n        opening {\n          days\n          hours\n        }\n      }\n      address {\n        postcode\n        city\n        street\n        location {\n          type\n          coordinates\n        }\n      }\n      minimumAmountForFreeShipping\n    }\n  }\n": types.ShopsDocument,
    "\nquery getSimilarProducts($productId: ID!, $offset: Int!, $limit: Int!, $shopId: ID) {\n    product(id: $productId) {\n        productsLikeThis(offset: $offset, limit: $limit, shopId: $shopId) {\n            id\n            name\n            status\n            canBuy\n            info {\n                gender\n                macroCategory\n                microCategory\n                brand\n                fit\n                traits\n                length\n                materials\n                description\n            }\n            variations{\n            id\n            color\n            status\n            photos\n            lots {\n                size\n                quantity\n                }\n            }\n            price {\n                v1\n                discountPercentage\n                v2\n            }\n            shopInfo{\n                id\n                businessId\n                name \n                city\n                status\n            }\n        }\n        id\n    }\n  }\n  \n": types.GetSimilarProductsDocument,
    "\n    query getProduct($id: ID!) {\n        product(\n            id: $id\n        ){\n            id\n            name\n            status\n            canBuy\n            info {\n                gender\n                macroCategory\n                microCategory\n                brand\n                fit\n                traits\n                length\n                materials\n                description\n                modelDescription\n            }\n            variations{\n            id\n            color\n            status\n            photos\n            lots {\n                size\n                quantity\n                }\n            }\n            price {\n                v1\n                discountPercentage\n                v2\n            }\n            shopInfo{\n                id\n                businessId\n                name \n                city\n                status\n            }\n            \n        } \n    }\n    \n": types.GetProductDocument,
    "\n    query getShop(\n        $id: ID!\n        $limit: Int!\n        $offset: Int!\n        $filters: ProductFilters!\n        ) {\n        shop(\n            id: $id\n        ){\n            id\n            businessId\n            name\n            createdAt\n            status\n            profilePhoto\n            profileCover\n            isDigitalOnly\n            minimumAmountForFreeShipping\n            info{\n                phone\n                description\n                opening{\n                    days\n                    hours\n                }\n            }\n            address{\n                postcode\n                city\n                street\n                location {\n                    type\n                    coordinates\n                }\n            }\n            products(\n                limit: $limit\n                offset: $offset\n                filters: $filters\n            ) \n            {\n                products{\n                    id\n                    name\n                    status\n                    canBuy\n                    info {\n                        gender\n                        macroCategory\n                        microCategory\n                        brand\n                        fit\n                    }\n                    variations{\n                    id\n                    color\n                    status\n                    photos\n                    lots {\n                        size\n                        quantity\n                        }\n                    }\n                    price {\n                        v1\n                        discountPercentage\n                        v2\n                    }\n                    shopInfo{\n                        id\n                        businessId\n                        name \n                        city\n                        status\n                        profilePhoto\n                    }\n                }\n                \n            }\n            \n        } \n    }\n": types.GetShopDocument,
    "\n    query user{\n        user{\n            id,\n            name,\n            surname,\n            stripeId,\n            firebaseId,\n            email,\n            phone,\n            gender,\n            createdAt,\n            carts{\n                carts\n                {\n                    id\n                    userId\n                    shopInfo {\n                        id\n                        name\n                        city\n                        status\n                    }\n                    total\n                    productVariations{\n                        productId\n                        id\n                        photo\n                        name\n                        quantity\n                        color\n                        size\n                        brand\n                        price{\n                            v1\n                            v2\n                            discountPercentage\n                        }\n                    }\n                }\n                warnings {\n                    variationId\n                }\n            } \n            orders(\n                limit:1000,\n                offset:0\n            )\n            {\n                id\n                code\n                cartId\n                createdAt\n                totalDetails{\n                    amountDiscount\n                    amountShipping\n                    subTotal\n                    total\n                }\n                status\n                shop{\n                    businessId\n                    stripeId\n                    id\n                    name\n                    address{\n                        postcode\n                        city\n                        street\n                    }\n                }\n                shipping{\n                    url\n                    courier\n                    code\n                }\n                productVariations{\n                    productId\n                    id\n                    photo\n                    name\n                    price{\n                        v1\n                        v2\n                        discountPercentage\n                    }\n                    brand\n                    quantity\n                    color\n                    size\n                }\n                user{\n                    stripeId\n                    id\n                    email\n                    name\n                    surname\n                }\n                recipient{\n                    name\n                    phone\n                    address{\n                        city\n                        country\n                        line1\n                        line2\n                        postalCode\n                        state\n                    }\n                }\n                history {\n                    date\n                    status\n                  }\n            }\n        }\n    }\n": types.UserDocument,
    "\n\n    query shop(\n        $id: ID!,\n        $statuses: [String!],\n        $limit: Int!,\n        $offset: Int!\n        ) {\n        shop(\n            id: $id\n        ){\n            id\n            address{\n                postcode\n                city\n                street\n                location {\n                    type\n                    coordinates\n                }\n            }\n            status\n            name\n            orders(\n                statuses: $statuses\n                limit: $limit\n                offset: $offset\n            ){\n                id\n                code\n                cartId\n                createdAt\n                totalDetails{\n                    amountDiscount\n                    amountShipping\n                    subTotal\n                    total\n                }\n                status\n                shop{\n                    businessId\n                    stripeId\n                    id\n                    name\n                }\n                shipping{\n                    url\n                    courier\n                    code\n                }\n                productVariations{\n                    productId\n                    id\n                    photo\n                    name\n                    price{\n                        v1\n                        v2\n                        discountPercentage\n                    }\n                    brand\n                    quantity\n                    color\n                    size\n                }\n                user{\n                    stripeId\n                    id\n                    email\n                    name\n                    surname\n                }\n                recipient{\n                    name\n                    phone\n                    address{\n                        city\n                        country\n                        line1\n                        line2\n                        postalCode\n                        state\n                    }\n                }  \n            }\n        } \n    }\n": types.ShopDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation editOrder(\n        $id: ID!\n        $options: EditOrderInput!\n    ) {\n        editOrder(\n            id: $id\n            options: $options\n        )\n    }\n"): (typeof documents)["\n    mutation editOrder(\n        $id: ID!\n        $options: EditOrderInput!\n    ) {\n        editOrder(\n            id: $id\n            options: $options\n        )\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation checkout(\n        $shopId: ID!\n    ) {\n        checkout(\n            shopId: $shopId\n        )\n    }\n"): (typeof documents)["\n    mutation checkout(\n        $shopId: ID!\n    ) {\n        checkout(\n            shopId: $shopId\n        )\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createBusinessStep1{\n        createBusinessStep1\n    }\n"): (typeof documents)["\n    mutation createBusinessStep1{\n        createBusinessStep1\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createInformation(\n        $options: InformationInput!\n    ) {\n        createInformation(\n            options: $options\n        )\n    }\n"): (typeof documents)["\n    mutation createInformation(\n        $options: InformationInput!\n    ) {\n        createInformation(\n            options: $options\n        )\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createProduct(\n        $shopId: ID!\n        $options: ProductInput!\n    ) {\n        createProduct(\n            shopId: $shopId\n            options: $options\n        )\n    }\n"): (typeof documents)["\n    mutation createProduct(\n        $shopId: ID!\n        $options: ProductInput!\n    ) {\n        createProduct(\n            shopId: $shopId\n            options: $options\n        )\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createShop(\n        $options: ShopInput!\n    ) {\n        createShop(\n            options: $options\n        )\n    }\n"): (typeof documents)["\n    mutation createShop(\n        $options: ShopInput!\n    ) {\n        createShop(\n            options: $options\n        )\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createStripeAccount(\n        $businessName: String!\n        $vatNumber: String!\n        $phone: String!\n    ) {\n        createStripeAccount(\n            businessName: $businessName\n            vatNumber: $vatNumber\n            phone: $phone\n        )\n    }\n"): (typeof documents)["\n    mutation createStripeAccount(\n        $businessName: String!\n        $vatNumber: String!\n        $phone: String!\n    ) {\n        createStripeAccount(\n            businessName: $businessName\n            vatNumber: $vatNumber\n            phone: $phone\n        )\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createUser(\n        $options: UserInput!\n    ) {\n        createUser(\n            options: $options\n        )\n    }\n"): (typeof documents)["\n    mutation createUser(\n        $options: UserInput!\n    ) {\n        createUser(\n            options: $options\n        )\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation createVariation(\n        $productId: ID!, $options: ProductVariationInput!\n    ) \n    {\n        createVariation(productId: $productId, options: $options)\n    }\n"): (typeof documents)["\nmutation createVariation(\n        $productId: ID!, $options: ProductVariationInput!\n    ) \n    {\n        createVariation(productId: $productId, options: $options)\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation deleteProduct(\n    $id: ID!\n  ){\n    deleteProduct(id: $id) \n  }\n\n"): (typeof documents)["\n  mutation deleteProduct(\n    $id: ID!\n  ){\n    deleteProduct(id: $id) \n  }\n\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation deleteVariation(\n    $id: ID!\n  ){\n    deleteVariation(id: $id) \n  }\n\n"): (typeof documents)["\n  mutation deleteVariation(\n    $id: ID!\n  ){\n    deleteVariation(id: $id) \n  }\n\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation Mutation($orderId: ID!) {\n        denyReturn(orderId: $orderId)\n    }\n"): (typeof documents)["\n    mutation Mutation($orderId: ID!) {\n        denyReturn(orderId: $orderId)\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation editCart(\n        $productVariationId: ID!\n        $size: String!\n        $quantity: Int!\n    ) {\n        editCart(\n            productVariationId: $productVariationId\n            size: $size\n            quantity: $quantity\n        )\n    }\n"): (typeof documents)["\n    mutation editCart(\n        $productVariationId: ID!\n        $size: String!\n        $quantity: Int!\n    ) {\n        editCart(\n            productVariationId: $productVariationId\n            size: $size\n            quantity: $quantity\n        )\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation editProduct(\n        $id: ID!\n        $options: EditProductInput!\n    ) {\n        editProduct(\n            id: $id\n            options: $options\n        )\n    }\n"): (typeof documents)["\n    mutation editProduct(\n        $id: ID!\n        $options: EditProductInput!\n    ) {\n        editProduct(\n            id: $id\n            options: $options\n        )\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation changeProductStatus(\n    $id: ID!\n    $status:String!\n  ){\n    changeProductStatus(\n        id: $id\n        status: $status\n    ) \n  }\n"): (typeof documents)["\n  mutation changeProductStatus(\n    $id: ID!\n    $status:String!\n  ){\n    changeProductStatus(\n        id: $id\n        status: $status\n    ) \n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation editUser(\n        $options: EditUserInput!\n    ) {\n        editUser(\n            options:$options\n        )\n    }\n"): (typeof documents)["\n    mutation editUser(\n        $options: EditUserInput!\n    ) {\n        editUser(\n            options:$options\n        )\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation editVariation(\n        $id:ID!\n        $options: EditVariationInput!\n    ) {\n        editVariation(\n            id:$id\n            options:$options\n        )\n    }\n"): (typeof documents)["\n    mutation editVariation(\n        $id:ID!\n        $options: EditVariationInput!\n    ) {\n        editVariation(\n            id:$id\n            options:$options\n        )\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation cancelOrder(\n        $orderId: ID!\n    ) {\n        cancelOrder(\n            orderId: $orderId\n        )\n    }\n"): (typeof documents)["\n    mutation cancelOrder(\n        $orderId: ID!\n    ) {\n        cancelOrder(\n            orderId: $orderId\n        )\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation returnOrder($returnOrderId: ID!) {\n    returnOrder(id: $returnOrderId)\n  }\n\n"): (typeof documents)["\n    mutation returnOrder($returnOrderId: ID!) {\n    returnOrder(id: $returnOrderId)\n  }\n\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation returnedOrderHasArrived($id: ID!) {\n        returnedOrderHasArrived(id: $id)\n    }\n"): (typeof documents)["\n    mutation returnedOrderHasArrived($id: ID!) {\n        returnedOrderHasArrived(id: $id)\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery betterInputGenerator($query: String!) {\n    betterInputGenerator(query: $query) {\n      colors\n      sizes\n      brand\n      minPrice\n      maxPrice\n      query\n      macroCategory\n      microCategory\n      keywords\n      univers\n    }\n  }\n"): (typeof documents)["\nquery betterInputGenerator($query: String!) {\n    betterInputGenerator(query: $query) {\n      colors\n      sizes\n      brand\n      minPrice\n      maxPrice\n      query\n      macroCategory\n      microCategory\n      keywords\n      univers\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query business($id: ID!) {\n        business(\n            id: $id\n        ){\n            firebaseId\n            vatNumber\n            email\n            businessName\n            phone\n            status\n            createdAt\n            stripe {\n                id\n            }\n            shops {\n                id\n                businessId\n                categories\n                name\n                createdAt\n                status\n                profilePhoto\n                minimumAmountForFreeShipping\n                profileCover\n                isDigitalOnly\n                info{\n                    phone\n                    description\n                    opening {\n                        days\n                        hours\n                    }\n                \n                }\n                address {\n                    postcode\n                    city\n                    street\n                    location {\n                        type\n                        coordinates\n                    }\n                }\n            }\n        } \n    }\n    \n"): (typeof documents)["\n    query business($id: ID!) {\n        business(\n            id: $id\n        ){\n            firebaseId\n            vatNumber\n            email\n            businessName\n            phone\n            status\n            createdAt\n            stripe {\n                id\n            }\n            shops {\n                id\n                businessId\n                categories\n                name\n                createdAt\n                status\n                profilePhoto\n                minimumAmountForFreeShipping\n                profileCover\n                isDigitalOnly\n                info{\n                    phone\n                    description\n                    opening {\n                        days\n                        hours\n                    }\n                \n                }\n                address {\n                    postcode\n                    city\n                    street\n                    location {\n                        type\n                        coordinates\n                    }\n                }\n            }\n        } \n    }\n    \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetProductsFromSingleShop(\n        $id: ID!\n        $limit: Int!\n        $offset: Int!\n        $filters: ProductFilters!\n        ) {\n        shop(\n            id: $id\n        )  {\n                id\n                products(\n                    limit: $limit\n                    offset: $offset\n                    filters: $filters\n                ){\n                    products{\n                        id\n                        name\n                        status\n                        canBuy\n                        info {\n                            gender\n                            macroCategory\n                            microCategory\n                            brand\n                            fit\n                        }\n                        variations{\n                        id\n                        color\n                        status\n                        photos\n                        lots {\n                            size\n                            quantity\n                            }\n                        }\n                        price {\n                            v1\n                            discountPercentage\n                            v2\n                        }\n                        shopInfo{\n                            id\n                            businessId\n                            name \n                            city\n                            status\n                            profilePhoto\n                        }\n                    }\n                } \n            \n            \n            } \n        }\n"): (typeof documents)["\n    query GetProductsFromSingleShop(\n        $id: ID!\n        $limit: Int!\n        $offset: Int!\n        $filters: ProductFilters!\n        ) {\n        shop(\n            id: $id\n        )  {\n                id\n                products(\n                    limit: $limit\n                    offset: $offset\n                    filters: $filters\n                ){\n                    products{\n                        id\n                        name\n                        status\n                        canBuy\n                        info {\n                            gender\n                            macroCategory\n                            microCategory\n                            brand\n                            fit\n                        }\n                        variations{\n                        id\n                        color\n                        status\n                        photos\n                        lots {\n                            size\n                            quantity\n                            }\n                        }\n                        price {\n                            v1\n                            discountPercentage\n                            v2\n                        }\n                        shopInfo{\n                            id\n                            businessId\n                            name \n                            city\n                            status\n                            profilePhoto\n                        }\n                    }\n                } \n            \n            \n            } \n        }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query order(\n        $id: ID!\n        ) {\n        order(\n            id: $id\n        ){\n            id\n            code\n            cartId\n            createdAt\n            totalDetails{\n                amountDiscount\n                amountShipping\n                subTotal\n                total\n            }\n            status\n            shop{\n                businessId\n                stripeId\n                id\n                name\n            }\n            shipping{\n                url\n                courier\n                code\n            }\n            productVariations{\n                productId\n                id\n                photo\n                name\n                price{\n                    v1\n                    v2\n                    discountPercentage\n                }\n                brand\n                quantity\n                color\n                size\n            }\n            user{\n                stripeId\n                id\n                email\n                name\n                surname\n            }\n            recipient{\n                name\n                phone\n                address{\n                    city\n                    country\n                    line1\n                    line2\n                    postalCode\n                    state\n                }\n            }  \n            history {\n                date\n                status\n              }\n        }   \n    }\n"): (typeof documents)["\n    query order(\n        $id: ID!\n        ) {\n        order(\n            id: $id\n        ){\n            id\n            code\n            cartId\n            createdAt\n            totalDetails{\n                amountDiscount\n                amountShipping\n                subTotal\n                total\n            }\n            status\n            shop{\n                businessId\n                stripeId\n                id\n                name\n            }\n            shipping{\n                url\n                courier\n                code\n            }\n            productVariations{\n                productId\n                id\n                photo\n                name\n                price{\n                    v1\n                    v2\n                    discountPercentage\n                }\n                brand\n                quantity\n                color\n                size\n            }\n            user{\n                stripeId\n                id\n                email\n                name\n                surname\n            }\n            recipient{\n                name\n                phone\n                address{\n                    city\n                    country\n                    line1\n                    line2\n                    postalCode\n                    state\n                }\n            }  \n            history {\n                date\n                status\n              }\n        }   \n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query products(\n        $limit: Int!\n        $offset: Int!\n        $filters: ProductFilters!   \n        ) {\n        products(\n            limit: $limit\n            offset: $offset\n            filters: $filters    \n        ){\n            products{\n                id\n                name\n                status\n                canBuy\n                info {\n                    gender\n                    macroCategory\n                    microCategory\n                    brand\n                    fit\n                }\n                variations{\n                id\n                color\n                status\n                photos\n                lots {\n                    size\n                    quantity\n                    }\n                }\n                price {\n                    v1\n                    discountPercentage\n                    v2\n                }\n                shopInfo{\n                    id\n                    businessId\n                    name \n                    city\n                    status\n                    profilePhoto\n                }\n            }\n        } \n    }\n    \n"): (typeof documents)["\n    query products(\n        $limit: Int!\n        $offset: Int!\n        $filters: ProductFilters!   \n        ) {\n        products(\n            limit: $limit\n            offset: $offset\n            filters: $filters    \n        ){\n            products{\n                id\n                name\n                status\n                canBuy\n                info {\n                    gender\n                    macroCategory\n                    microCategory\n                    brand\n                    fit\n                }\n                variations{\n                id\n                color\n                status\n                photos\n                lots {\n                    size\n                    quantity\n                    }\n                }\n                price {\n                    v1\n                    discountPercentage\n                    v2\n                }\n                shopInfo{\n                    id\n                    businessId\n                    name \n                    city\n                    status\n                    profilePhoto\n                }\n            }\n        } \n    }\n    \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getSingleShop(\n        $id: ID!\n        ) {\n        shop(\n            id: $id\n        ){\n            id\n            businessId\n            name\n            categories\n            createdAt\n            status\n            profilePhoto\n            profileCover\n            isDigitalOnly\n            minimumAmountForFreeShipping\n            info{\n                phone\n                description\n                opening{\n                    days\n                    hours\n                }\n            }\n            address{\n                postcode\n                city\n                street\n                location {\n                    type\n                    coordinates\n                }\n            }\n            \n        } \n    }\n"): (typeof documents)["\n    query getSingleShop(\n        $id: ID!\n        ) {\n        shop(\n            id: $id\n        ){\n            id\n            businessId\n            name\n            categories\n            createdAt\n            status\n            profilePhoto\n            profileCover\n            isDigitalOnly\n            minimumAmountForFreeShipping\n            info{\n                phone\n                description\n                opening{\n                    days\n                    hours\n                }\n            }\n            address{\n                postcode\n                city\n                street\n                location {\n                    type\n                    coordinates\n                }\n            }\n            \n        } \n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query shops($limit: Int!, $offset: Int!, $filters: ShopFilters!) {\n    shops(limit: $limit, offset: $offset, filters: $filters) {\n      categories\n      id\n      businessId\n      businessStatus\n      name\n      createdAt\n      status\n      profileCover\n      profilePhoto\n      isDigitalOnly\n      info {\n        phone\n        description\n        opening {\n          days\n          hours\n        }\n      }\n      address {\n        postcode\n        city\n        street\n        location {\n          type\n          coordinates\n        }\n      }\n      minimumAmountForFreeShipping\n    }\n  }\n"): (typeof documents)["\n    query shops($limit: Int!, $offset: Int!, $filters: ShopFilters!) {\n    shops(limit: $limit, offset: $offset, filters: $filters) {\n      categories\n      id\n      businessId\n      businessStatus\n      name\n      createdAt\n      status\n      profileCover\n      profilePhoto\n      isDigitalOnly\n      info {\n        phone\n        description\n        opening {\n          days\n          hours\n        }\n      }\n      address {\n        postcode\n        city\n        street\n        location {\n          type\n          coordinates\n        }\n      }\n      minimumAmountForFreeShipping\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery getSimilarProducts($productId: ID!, $offset: Int!, $limit: Int!, $shopId: ID) {\n    product(id: $productId) {\n        productsLikeThis(offset: $offset, limit: $limit, shopId: $shopId) {\n            id\n            name\n            status\n            canBuy\n            info {\n                gender\n                macroCategory\n                microCategory\n                brand\n                fit\n                traits\n                length\n                materials\n                description\n            }\n            variations{\n            id\n            color\n            status\n            photos\n            lots {\n                size\n                quantity\n                }\n            }\n            price {\n                v1\n                discountPercentage\n                v2\n            }\n            shopInfo{\n                id\n                businessId\n                name \n                city\n                status\n            }\n        }\n        id\n    }\n  }\n  \n"): (typeof documents)["\nquery getSimilarProducts($productId: ID!, $offset: Int!, $limit: Int!, $shopId: ID) {\n    product(id: $productId) {\n        productsLikeThis(offset: $offset, limit: $limit, shopId: $shopId) {\n            id\n            name\n            status\n            canBuy\n            info {\n                gender\n                macroCategory\n                microCategory\n                brand\n                fit\n                traits\n                length\n                materials\n                description\n            }\n            variations{\n            id\n            color\n            status\n            photos\n            lots {\n                size\n                quantity\n                }\n            }\n            price {\n                v1\n                discountPercentage\n                v2\n            }\n            shopInfo{\n                id\n                businessId\n                name \n                city\n                status\n            }\n        }\n        id\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getProduct($id: ID!) {\n        product(\n            id: $id\n        ){\n            id\n            name\n            status\n            canBuy\n            info {\n                gender\n                macroCategory\n                microCategory\n                brand\n                fit\n                traits\n                length\n                materials\n                description\n                modelDescription\n            }\n            variations{\n            id\n            color\n            status\n            photos\n            lots {\n                size\n                quantity\n                }\n            }\n            price {\n                v1\n                discountPercentage\n                v2\n            }\n            shopInfo{\n                id\n                businessId\n                name \n                city\n                status\n            }\n            \n        } \n    }\n    \n"): (typeof documents)["\n    query getProduct($id: ID!) {\n        product(\n            id: $id\n        ){\n            id\n            name\n            status\n            canBuy\n            info {\n                gender\n                macroCategory\n                microCategory\n                brand\n                fit\n                traits\n                length\n                materials\n                description\n                modelDescription\n            }\n            variations{\n            id\n            color\n            status\n            photos\n            lots {\n                size\n                quantity\n                }\n            }\n            price {\n                v1\n                discountPercentage\n                v2\n            }\n            shopInfo{\n                id\n                businessId\n                name \n                city\n                status\n            }\n            \n        } \n    }\n    \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getShop(\n        $id: ID!\n        $limit: Int!\n        $offset: Int!\n        $filters: ProductFilters!\n        ) {\n        shop(\n            id: $id\n        ){\n            id\n            businessId\n            name\n            createdAt\n            status\n            profilePhoto\n            profileCover\n            isDigitalOnly\n            minimumAmountForFreeShipping\n            info{\n                phone\n                description\n                opening{\n                    days\n                    hours\n                }\n            }\n            address{\n                postcode\n                city\n                street\n                location {\n                    type\n                    coordinates\n                }\n            }\n            products(\n                limit: $limit\n                offset: $offset\n                filters: $filters\n            ) \n            {\n                products{\n                    id\n                    name\n                    status\n                    canBuy\n                    info {\n                        gender\n                        macroCategory\n                        microCategory\n                        brand\n                        fit\n                    }\n                    variations{\n                    id\n                    color\n                    status\n                    photos\n                    lots {\n                        size\n                        quantity\n                        }\n                    }\n                    price {\n                        v1\n                        discountPercentage\n                        v2\n                    }\n                    shopInfo{\n                        id\n                        businessId\n                        name \n                        city\n                        status\n                        profilePhoto\n                    }\n                }\n                \n            }\n            \n        } \n    }\n"): (typeof documents)["\n    query getShop(\n        $id: ID!\n        $limit: Int!\n        $offset: Int!\n        $filters: ProductFilters!\n        ) {\n        shop(\n            id: $id\n        ){\n            id\n            businessId\n            name\n            createdAt\n            status\n            profilePhoto\n            profileCover\n            isDigitalOnly\n            minimumAmountForFreeShipping\n            info{\n                phone\n                description\n                opening{\n                    days\n                    hours\n                }\n            }\n            address{\n                postcode\n                city\n                street\n                location {\n                    type\n                    coordinates\n                }\n            }\n            products(\n                limit: $limit\n                offset: $offset\n                filters: $filters\n            ) \n            {\n                products{\n                    id\n                    name\n                    status\n                    canBuy\n                    info {\n                        gender\n                        macroCategory\n                        microCategory\n                        brand\n                        fit\n                    }\n                    variations{\n                    id\n                    color\n                    status\n                    photos\n                    lots {\n                        size\n                        quantity\n                        }\n                    }\n                    price {\n                        v1\n                        discountPercentage\n                        v2\n                    }\n                    shopInfo{\n                        id\n                        businessId\n                        name \n                        city\n                        status\n                        profilePhoto\n                    }\n                }\n                \n            }\n            \n        } \n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query user{\n        user{\n            id,\n            name,\n            surname,\n            stripeId,\n            firebaseId,\n            email,\n            phone,\n            gender,\n            createdAt,\n            carts{\n                carts\n                {\n                    id\n                    userId\n                    shopInfo {\n                        id\n                        name\n                        city\n                        status\n                    }\n                    total\n                    productVariations{\n                        productId\n                        id\n                        photo\n                        name\n                        quantity\n                        color\n                        size\n                        brand\n                        price{\n                            v1\n                            v2\n                            discountPercentage\n                        }\n                    }\n                }\n                warnings {\n                    variationId\n                }\n            } \n            orders(\n                limit:1000,\n                offset:0\n            )\n            {\n                id\n                code\n                cartId\n                createdAt\n                totalDetails{\n                    amountDiscount\n                    amountShipping\n                    subTotal\n                    total\n                }\n                status\n                shop{\n                    businessId\n                    stripeId\n                    id\n                    name\n                    address{\n                        postcode\n                        city\n                        street\n                    }\n                }\n                shipping{\n                    url\n                    courier\n                    code\n                }\n                productVariations{\n                    productId\n                    id\n                    photo\n                    name\n                    price{\n                        v1\n                        v2\n                        discountPercentage\n                    }\n                    brand\n                    quantity\n                    color\n                    size\n                }\n                user{\n                    stripeId\n                    id\n                    email\n                    name\n                    surname\n                }\n                recipient{\n                    name\n                    phone\n                    address{\n                        city\n                        country\n                        line1\n                        line2\n                        postalCode\n                        state\n                    }\n                }\n                history {\n                    date\n                    status\n                  }\n            }\n        }\n    }\n"): (typeof documents)["\n    query user{\n        user{\n            id,\n            name,\n            surname,\n            stripeId,\n            firebaseId,\n            email,\n            phone,\n            gender,\n            createdAt,\n            carts{\n                carts\n                {\n                    id\n                    userId\n                    shopInfo {\n                        id\n                        name\n                        city\n                        status\n                    }\n                    total\n                    productVariations{\n                        productId\n                        id\n                        photo\n                        name\n                        quantity\n                        color\n                        size\n                        brand\n                        price{\n                            v1\n                            v2\n                            discountPercentage\n                        }\n                    }\n                }\n                warnings {\n                    variationId\n                }\n            } \n            orders(\n                limit:1000,\n                offset:0\n            )\n            {\n                id\n                code\n                cartId\n                createdAt\n                totalDetails{\n                    amountDiscount\n                    amountShipping\n                    subTotal\n                    total\n                }\n                status\n                shop{\n                    businessId\n                    stripeId\n                    id\n                    name\n                    address{\n                        postcode\n                        city\n                        street\n                    }\n                }\n                shipping{\n                    url\n                    courier\n                    code\n                }\n                productVariations{\n                    productId\n                    id\n                    photo\n                    name\n                    price{\n                        v1\n                        v2\n                        discountPercentage\n                    }\n                    brand\n                    quantity\n                    color\n                    size\n                }\n                user{\n                    stripeId\n                    id\n                    email\n                    name\n                    surname\n                }\n                recipient{\n                    name\n                    phone\n                    address{\n                        city\n                        country\n                        line1\n                        line2\n                        postalCode\n                        state\n                    }\n                }\n                history {\n                    date\n                    status\n                  }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\n    query shop(\n        $id: ID!,\n        $statuses: [String!],\n        $limit: Int!,\n        $offset: Int!\n        ) {\n        shop(\n            id: $id\n        ){\n            id\n            address{\n                postcode\n                city\n                street\n                location {\n                    type\n                    coordinates\n                }\n            }\n            status\n            name\n            orders(\n                statuses: $statuses\n                limit: $limit\n                offset: $offset\n            ){\n                id\n                code\n                cartId\n                createdAt\n                totalDetails{\n                    amountDiscount\n                    amountShipping\n                    subTotal\n                    total\n                }\n                status\n                shop{\n                    businessId\n                    stripeId\n                    id\n                    name\n                }\n                shipping{\n                    url\n                    courier\n                    code\n                }\n                productVariations{\n                    productId\n                    id\n                    photo\n                    name\n                    price{\n                        v1\n                        v2\n                        discountPercentage\n                    }\n                    brand\n                    quantity\n                    color\n                    size\n                }\n                user{\n                    stripeId\n                    id\n                    email\n                    name\n                    surname\n                }\n                recipient{\n                    name\n                    phone\n                    address{\n                        city\n                        country\n                        line1\n                        line2\n                        postalCode\n                        state\n                    }\n                }  \n            }\n        } \n    }\n"): (typeof documents)["\n\n    query shop(\n        $id: ID!,\n        $statuses: [String!],\n        $limit: Int!,\n        $offset: Int!\n        ) {\n        shop(\n            id: $id\n        ){\n            id\n            address{\n                postcode\n                city\n                street\n                location {\n                    type\n                    coordinates\n                }\n            }\n            status\n            name\n            orders(\n                statuses: $statuses\n                limit: $limit\n                offset: $offset\n            ){\n                id\n                code\n                cartId\n                createdAt\n                totalDetails{\n                    amountDiscount\n                    amountShipping\n                    subTotal\n                    total\n                }\n                status\n                shop{\n                    businessId\n                    stripeId\n                    id\n                    name\n                }\n                shipping{\n                    url\n                    courier\n                    code\n                }\n                productVariations{\n                    productId\n                    id\n                    photo\n                    name\n                    price{\n                        v1\n                        v2\n                        discountPercentage\n                    }\n                    brand\n                    quantity\n                    color\n                    size\n                }\n                user{\n                    stripeId\n                    id\n                    email\n                    name\n                    surname\n                }\n                recipient{\n                    name\n                    phone\n                    address{\n                        city\n                        country\n                        line1\n                        line2\n                        postalCode\n                        state\n                    }\n                }  \n            }\n        } \n    }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;